@page "/tasker-db"
@using System.Text.Json
@using System.Text.Json.Serialization
@using Microsoft.AspNetCore.Authorization
@using TaskerFullStackApp.Client.Models
@using Microsoft.AspNetCore.Components.Authorization
@inject IJSRuntime JS
@inject HttpClient _http
@rendermode InteractiveWebAssembly

@attribute [Authorize]
<PageTitle>Tasks</PageTitle>
<div class="d-flex align-items-center justify-content-center mt-5">
    <div class="task p-5">
        <div class="p-2 text-center mb-3">
            <img src="/img/Tasker_600.png" width="300" />
        </div>
        <EditForm Model="ti" OnValidSubmit="AddTaskAsync">
            <DataAnnotationsValidator />
            <div class="d-flex flex-row gap-2">
                <InputText @ref="TextBoxTask" class="form-control" placeholder="Enter a task" @bind-Value="ti.Name" />
                <button type="submit" class="btn btn-primary">Add</button>
            </div>
            <div class="pt-1">
                <ValidationMessage For="() => ti.Name" />
            </div>
        </EditForm>
        <div>
            <hr />
            <div class="vstack">
                @foreach (var lineItem in taskerItems)
                {
                    <TaskerLineComponent Item="lineItem" OnDeleteCallback="@DeleteTask" OnCompleteCallback="@UpdateTask" />
                }

            </div>
        </div>
    </div>
</div>
@code {
    #region VARIABLES
    //model instance
    private TaskerItem ti = new();
    private List<TaskerItem> taskerItems = new();

    private InputText? TextBoxTask { get; set; }
    #endregion

    #region LIFE CYCLE METHODS
    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {   //Puts focus on the input box after the component is rendered
            await TextBoxTask!.Element!.Value.FocusAsync();

            //load items from db
            await LoadListAsync();
            StateHasChanged(); //trigger a re-render of the component
        }
    }
    #endregion

    #region METHODS
    public async Task LoadListAsync()
    {
        try
        {
            HttpResponseMessage response = await _http.GetAsync("api/TaskerItem");
            response.EnsureSuccessStatusCode();
            //parse the JSON response into a list of TaskerItem objects
            taskerItems = await response.Content.ReadFromJsonAsync<List<TaskerItem>>() ?? [];
            StateHasChanged();
        }
        catch (Exception)
        {

            taskerItems = new List<TaskerItem>();
        }
    }

    #region CRUD METHODS
    public async Task AddTaskAsync()
    {
        //generate a new GUID for the task
        ti.Id = Guid.NewGuid();
        try
        {
            HttpResponseMessage responseMessage = await _http.PostAsJsonAsync("api/taskerItem", ti);
            ti = new();
            //reload the list from db
            await LoadListAsync(); 

        }
        catch (Exception)
        {
            //places focus on the input box again
            await TextBoxTask!.Element!.Value.FocusAsync(); 
        }
    }

    private async void DeleteTask(TaskerItem item)
    {
        try
        {
            string route = $"api/TaskerItem/{item.Id}";
            HttpResponseMessage response = await _http.DeleteAsync(route);
            response.EnsureSuccessStatusCode();
            await LoadListAsync(); //reload the list from db
        }
        catch (Exception)
        {
            
            throw;
        }
    }
    private async Task UpdateTask(TaskerItem item)
    {
        try
        {
            string route = $"api/TaskerItem/{item.Id}";
            HttpResponseMessage response = await _http.PutAsJsonAsync(route, item);
            response.EnsureSuccessStatusCode();
            //reload the list from db
            await LoadListAsync(); 
        }
        catch (Exception)
        {
            
            throw;
        }
    }
    #endregion
    #endregion
}
